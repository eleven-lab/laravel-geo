
window.projectVersion = 'master';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:Karomap" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap.html">Karomap</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Karomap_GeoLaravel" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel.html">GeoLaravel</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Karomap_GeoLaravel_Database" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database.html">Database</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Karomap_GeoLaravel_Database_Connectors" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database/Connectors.html">Connectors</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_Database_Connectors_ConnectionFactory" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Connectors/ConnectionFactory.html">ConnectionFactory</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Karomap_GeoLaravel_Database_Query" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database/Query.html">Query</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Karomap_GeoLaravel_Database_Query_Grammars" >                    <div style="padding-left:72px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database/Query/Grammars.html">Grammars</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_Database_Query_Grammars_MySqlGrammar" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html">MySqlGrammar</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Query_Grammars_PostgresGrammar" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html">PostgresGrammar</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Query_Builder" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Query/Builder.html">Builder</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Karomap_GeoLaravel_Database_Schema" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database/Schema.html">Schema</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Karomap_GeoLaravel_Database_Schema_Grammars" >                    <div style="padding-left:72px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Database/Schema/Grammars.html">Grammars</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_Database_Schema_Grammars_MySqlGrammar" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html">MySqlGrammar</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Schema_Grammars_PostgresGrammar" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html">PostgresGrammar</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Schema_Blueprint" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/Blueprint.html">Blueprint</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Schema_GeoBuilder" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/GeoBuilder.html">GeoBuilder</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Schema_MySqlBuilder" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/MySqlBuilder.html">MySqlBuilder</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_Schema_PostgresBuilder" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html">PostgresBuilder</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_MySqlConnection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/MySqlConnection.html">MySqlConnection</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Database_PostgresConnection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Database/PostgresConnection.html">PostgresConnection</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Karomap_GeoLaravel_DoctrineTypes" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/DoctrineTypes.html">DoctrineTypes</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_GeographyType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/GeographyType.html">GeographyType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_GeomCollectionType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/GeomCollectionType.html">GeomCollectionType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_GeometryCollectionType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/GeometryCollectionType.html">GeometryCollectionType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_GeometryType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/GeometryType.html">GeometryType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_LineStringType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/LineStringType.html">LineStringType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_MultiLineStringType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/MultiLineStringType.html">MultiLineStringType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_MultiPointType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/MultiPointType.html">MultiPointType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_MultiPolygonType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/MultiPolygonType.html">MultiPolygonType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_PointType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/PointType.html">PointType</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DoctrineTypes_PolygonType" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DoctrineTypes/PolygonType.html">PolygonType</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Karomap_GeoLaravel_Eloquent" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Eloquent.html">Eloquent</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_Eloquent_Model" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Eloquent/Model.html">Model</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Karomap_GeoLaravel_Exceptions" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Karomap/GeoLaravel/Exceptions.html">Exceptions</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Karomap_GeoLaravel_Exceptions_GeoException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Exceptions/GeoException.html">GeoException</a>                    </div>                </li>                            <li data-name="class:Karomap_GeoLaravel_Exceptions_InvalidArgumentSpatialException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Karomap/GeoLaravel/Exceptions/InvalidArgumentSpatialException.html">InvalidArgumentSpatialException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Karomap_GeoLaravel_DatabaseServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Karomap/GeoLaravel/DatabaseServiceProvider.html">DatabaseServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "Karomap.html", "name": "Karomap", "doc": "Namespace Karomap"},{"type": "Namespace", "link": "Karomap/GeoLaravel.html", "name": "Karomap\\GeoLaravel", "doc": "Namespace Karomap\\GeoLaravel"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database.html", "name": "Karomap\\GeoLaravel\\Database", "doc": "Namespace Karomap\\GeoLaravel\\Database"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database/Connectors.html", "name": "Karomap\\GeoLaravel\\Database\\Connectors", "doc": "Namespace Karomap\\GeoLaravel\\Database\\Connectors"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database/Query.html", "name": "Karomap\\GeoLaravel\\Database\\Query", "doc": "Namespace Karomap\\GeoLaravel\\Database\\Query"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database/Query/Grammars.html", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars", "doc": "Namespace Karomap\\GeoLaravel\\Database\\Query\\Grammars"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database/Schema.html", "name": "Karomap\\GeoLaravel\\Database\\Schema", "doc": "Namespace Karomap\\GeoLaravel\\Database\\Schema"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Database/Schema/Grammars.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars", "doc": "Namespace Karomap\\GeoLaravel\\Database\\Schema\\Grammars"},{"type": "Namespace", "link": "Karomap/GeoLaravel/DoctrineTypes.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes", "doc": "Namespace Karomap\\GeoLaravel\\DoctrineTypes"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Eloquent.html", "name": "Karomap\\GeoLaravel\\Eloquent", "doc": "Namespace Karomap\\GeoLaravel\\Eloquent"},{"type": "Namespace", "link": "Karomap/GeoLaravel/Exceptions.html", "name": "Karomap\\GeoLaravel\\Exceptions", "doc": "Namespace Karomap\\GeoLaravel\\Exceptions"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel", "fromLink": "Karomap/GeoLaravel.html", "link": "Karomap/GeoLaravel/DatabaseServiceProvider.html", "name": "Karomap\\GeoLaravel\\DatabaseServiceProvider", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DatabaseServiceProvider", "fromLink": "Karomap/GeoLaravel/DatabaseServiceProvider.html", "link": "Karomap/GeoLaravel/DatabaseServiceProvider.html#method_boot", "name": "Karomap\\GeoLaravel\\DatabaseServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DatabaseServiceProvider", "fromLink": "Karomap/GeoLaravel/DatabaseServiceProvider.html", "link": "Karomap/GeoLaravel/DatabaseServiceProvider.html#method_register", "name": "Karomap\\GeoLaravel\\DatabaseServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DatabaseServiceProvider", "fromLink": "Karomap/GeoLaravel/DatabaseServiceProvider.html", "link": "Karomap/GeoLaravel/DatabaseServiceProvider.html#method_registerConnectionServices", "name": "Karomap\\GeoLaravel\\DatabaseServiceProvider::registerConnectionServices", "doc": "&quot;Register the primary database bindings.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Connectors", "fromLink": "Karomap/GeoLaravel/Database/Connectors.html", "link": "Karomap/GeoLaravel/Database/Connectors/ConnectionFactory.html", "name": "Karomap\\GeoLaravel\\Database\\Connectors\\ConnectionFactory", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Connectors\\ConnectionFactory", "fromLink": "Karomap/GeoLaravel/Database/Connectors/ConnectionFactory.html", "link": "Karomap/GeoLaravel/Database/Connectors/ConnectionFactory.html#method_createConnection", "name": "Karomap\\GeoLaravel\\Database\\Connectors\\ConnectionFactory::createConnection", "doc": "&quot;Create a new connection instance.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database", "fromLink": "Karomap/GeoLaravel/Database.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method___construct", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::__construct", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_getSchemaBuilder", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::getSchemaBuilder", "doc": "&quot;Get a schema builder instance for the connection.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_getDefaultSchemaGrammar", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::getDefaultSchemaGrammar", "doc": "&quot;Get the default schema grammar instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_getDefaultQueryGrammar", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::getDefaultQueryGrammar", "doc": "&quot;Get the default query grammar instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_query", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::query", "doc": "&quot;Get a new query builder instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_rawGeo", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::rawGeo", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_fromRawToWKB", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::fromRawToWKB", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_geoFromText", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::geoFromText", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_intersection", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::intersection", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_difference", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::difference", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_contains", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::contains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_intersects", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::intersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_touches", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::touches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_overlaps", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::overlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_centroid", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::centroid", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_distance", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::distance", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_equals", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::equals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_queryDistance", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::queryDistance", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\MySqlConnection", "fromLink": "Karomap/GeoLaravel/Database/MySqlConnection.html", "link": "Karomap/GeoLaravel/Database/MySqlConnection.html#method_getSRID", "name": "Karomap\\GeoLaravel\\Database\\MySqlConnection::getSRID", "doc": "&quot;Get column SRID&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database", "fromLink": "Karomap/GeoLaravel/Database.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method___construct", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::__construct", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_getSchemaBuilder", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::getSchemaBuilder", "doc": "&quot;Get a schema builder instance for the connection.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_getDefaultSchemaGrammar", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::getDefaultSchemaGrammar", "doc": "&quot;Get the default schema grammar instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_getDefaultQueryGrammar", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::getDefaultQueryGrammar", "doc": "&quot;Get the default query grammar instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_query", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::query", "doc": "&quot;Get a new query builder instance.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_rawGeo", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::rawGeo", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_fromRawToWKB", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::fromRawToWKB", "doc": "&quot;Convert raw database value to WKB.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_geoFromText", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::geoFromText", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_intersection", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::intersection", "doc": "&quot;Get intersection from 2 geometries.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_difference", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::difference", "doc": "&quot;Get difference from 2 geometries.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_contains", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::contains", "doc": "&quot;Check wether a polygon contains a point.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_intersects", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::intersects", "doc": "&quot;Check wether geometry 1 intersects geometry 2.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_touches", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::touches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_overlaps", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::overlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_centroid", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::centroid", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_distance", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::distance", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_equals", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::equals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_queryDistance", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::queryDistance", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_getSRID", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::getSRID", "doc": "&quot;Get column SRID&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\PostgresConnection", "fromLink": "Karomap/GeoLaravel/Database/PostgresConnection.html", "link": "Karomap/GeoLaravel/Database/PostgresConnection.html#method_hasView", "name": "Karomap\\GeoLaravel\\Database\\PostgresConnection::hasView", "doc": "&quot;Check view exists&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Query", "fromLink": "Karomap/GeoLaravel/Database/Query.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereNotEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereNotEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereNotEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereNotEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereNotContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereNotContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereNotContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereNotContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereNotIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereNotIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereNotIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereNotIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereNotTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereNotTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereNotTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereNotTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereOverlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_whereNotOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::whereNotOverlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereOverlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Builder", "fromLink": "Karomap/GeoLaravel/Database/Query/Builder.html", "link": "Karomap/GeoLaravel/Database/Query/Builder.html#method_orWhereNotOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Builder::orWhereNotOverlaps", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereNotEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereNotEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereNotContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereNotContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereNotIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereNotIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereNotTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereNotTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereOverlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/MySqlGrammar.html#method_whereNotOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\MySqlGrammar::whereNotOverlaps", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereNotEquals", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereNotEquals", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereNotContains", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereNotContains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereNotIntersects", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereNotIntersects", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereNotTouches", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereNotTouches", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereOverlaps", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Query/Grammars/PostgresGrammar.html#method_whereNotOverlaps", "name": "Karomap\\GeoLaravel\\Database\\Query\\Grammars\\PostgresGrammar::whereNotOverlaps", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Schema", "fromLink": "Karomap/GeoLaravel/Database/Schema.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "doc": "&quot;Extended version of Blueprint with\nsupport of geo data type\nfor laravel below 5.5&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_geometry", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::geometry", "doc": "&quot;Create a new geometry column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_point", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::point", "doc": "&quot;Create a new point column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_lineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::lineString", "doc": "&quot;Create a new linestring column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_polygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::polygon", "doc": "&quot;Create a new polygon column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_geometryCollection", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::geometryCollection", "doc": "&quot;Create a new geometrycollection column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_multiPoint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::multiPoint", "doc": "&quot;Create a new multipoint column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_multiLineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::multiLineString", "doc": "&quot;Create a new multilinestring column on the table.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint", "fromLink": "Karomap/GeoLaravel/Database/Schema/Blueprint.html", "link": "Karomap/GeoLaravel/Database/Schema/Blueprint.html#method_multiPolygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Blueprint::multiPolygon", "doc": "&quot;Create a new multipolygon column on the table.&quot;"},
            
            {"type": "Trait", "fromName": "Karomap\\GeoLaravel\\Database\\Schema", "fromLink": "Karomap/GeoLaravel/Database/Schema.html", "link": "Karomap/GeoLaravel/Database/Schema/GeoBuilder.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\GeoBuilder", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\GeoBuilder", "fromLink": "Karomap/GeoLaravel/Database/Schema/GeoBuilder.html", "link": "Karomap/GeoLaravel/Database/Schema/GeoBuilder.html#method_createBlueprint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\GeoBuilder::createBlueprint", "doc": "&quot;Create a new command set with a Closure.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "doc": "&quot;Extended version of MySqlGrammar with\nsupport of &#039;set&#039; data type&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeGeometry", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeGeometry", "doc": "&quot;Create the column definition for a spatial Geometry type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typePoint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typePoint", "doc": "&quot;Create the column definition for a spatial Point type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeLineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeLineString", "doc": "&quot;Create the column definition for a spatial LineString type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typePolygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typePolygon", "doc": "&quot;Create the column definition for a spatial Polygon type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeGeometryCollection", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeGeometryCollection", "doc": "&quot;Create the column definition for a spatial GeometryCollection type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiPoint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiPoint", "doc": "&quot;Create the column definition for a spatial MultiPoint type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiLineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiLineString", "doc": "&quot;Create the column definition for a spatial MultiLineString type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiPolygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiPolygon", "doc": "&quot;Create the column definition for a spatial MultiPolygon type.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "doc": "&quot;Extended version of PostgressGrammar with\nsupport of &#039;set&#039; data type&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeGeometry", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeGeometry", "doc": "&quot;Create the column definition for a spatial Geometry type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typePoint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typePoint", "doc": "&quot;Create the column definition for a spatial Point type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeLineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeLineString", "doc": "&quot;Create the column definition for a spatial LineString type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typePolygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typePolygon", "doc": "&quot;Create the column definition for a spatial Polygon type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeGeometryCollection", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeGeometryCollection", "doc": "&quot;Create the column definition for a spatial GeometryCollection type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiPoint", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiPoint", "doc": "&quot;Create the column definition for a spatial MultiPoint type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiLineString", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiLineString", "doc": "&quot;Create the column definition for a spatial MultiLineString type.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar", "fromLink": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html", "link": "Karomap/GeoLaravel/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiPolygon", "name": "Karomap\\GeoLaravel\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiPolygon", "doc": "&quot;Create the column definition for a spatial MultiPolygon type.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Schema", "fromLink": "Karomap/GeoLaravel/Database/Schema.html", "link": "Karomap/GeoLaravel/Database/Schema/MySqlBuilder.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\MySqlBuilder", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Database\\Schema", "fromLink": "Karomap/GeoLaravel/Database/Schema.html", "link": "Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html", "name": "Karomap\\GeoLaravel\\Database\\Schema\\PostgresBuilder", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\PostgresBuilder", "fromLink": "Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html", "link": "Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html#method_hasTable", "name": "Karomap\\GeoLaravel\\Database\\Schema\\PostgresBuilder::hasTable", "doc": "&quot;Determine if the given table exists.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Database\\Schema\\PostgresBuilder", "fromLink": "Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html", "link": "Karomap/GeoLaravel/Database/Schema/PostgresBuilder.html#method_parseSchemaAndTable", "name": "Karomap\\GeoLaravel\\Database\\Schema\\PostgresBuilder::parseSchemaAndTable", "doc": "&quot;Parse the table name and extract the schema and table.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeographyType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeographyType", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeographyType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeographyType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeographyType.html#method_convertToDatabaseValueSQL", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeographyType::convertToDatabaseValueSQL", "doc": "&quot;{@inheritDoc}&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeomCollectionType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeomCollectionType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryCollectionType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryCollectionType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_getSQLDeclaration", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::getSQLDeclaration", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_getName", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::getName", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_canRequireSQLConversion", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::canRequireSQLConversion", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_convertToPHPValue", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::convertToPHPValue", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_convertToPHPValueSQL", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::convertToPHPValueSQL", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType", "fromLink": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html", "link": "Karomap/GeoLaravel/DoctrineTypes/GeometryType.html#method_convertToDatabaseValueSQL", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\GeometryType::convertToDatabaseValueSQL", "doc": "&quot;{@inheritDoc}&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/LineStringType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\LineStringType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/MultiLineStringType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\MultiLineStringType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/MultiPointType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\MultiPointType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/MultiPolygonType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\MultiPolygonType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/PointType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\PointType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\DoctrineTypes", "fromLink": "Karomap/GeoLaravel/DoctrineTypes.html", "link": "Karomap/GeoLaravel/DoctrineTypes/PolygonType.html", "name": "Karomap\\GeoLaravel\\DoctrineTypes\\PolygonType", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Eloquent", "fromLink": "Karomap/GeoLaravel/Eloquent.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html", "name": "Karomap\\GeoLaravel\\Eloquent\\Model", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_boot", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::boot", "doc": "&quot;Override the \&quot;boot\&quot; method of the model.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_newBaseQueryBuilder", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::newBaseQueryBuilder", "doc": "&quot;Get a new custom query builder instance for the connection.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_updateGeoAttributes", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::updateGeoAttributes", "doc": "&quot;Update geometry attributes.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_getSRID", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::getSRID", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_newFromBuilder", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::newFromBuilder", "doc": "&quot;Create a new model instance that is existing.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method___get", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::__get", "doc": "&quot;Dynamically retrieve attributes on the model.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_attributesToArray", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::attributesToArray", "doc": "&quot;Convert the model&#039;s attributes to an array.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_toGeoJson", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::toGeoJson", "doc": "&quot;Convert model to GeoJSON.&quot;"},
                    {"type": "Method", "fromName": "Karomap\\GeoLaravel\\Eloquent\\Model", "fromLink": "Karomap/GeoLaravel/Eloquent/Model.html", "link": "Karomap/GeoLaravel/Eloquent/Model.html#method_buildFeature", "name": "Karomap\\GeoLaravel\\Eloquent\\Model::buildFeature", "doc": "&quot;Convert model to GeoJSON feature.&quot;"},
            
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Exceptions", "fromLink": "Karomap/GeoLaravel/Exceptions.html", "link": "Karomap/GeoLaravel/Exceptions/GeoException.html", "name": "Karomap\\GeoLaravel\\Exceptions\\GeoException", "doc": "&quot;&quot;"},
                    
            {"type": "Class", "fromName": "Karomap\\GeoLaravel\\Exceptions", "fromLink": "Karomap/GeoLaravel/Exceptions.html", "link": "Karomap/GeoLaravel/Exceptions/InvalidArgumentSpatialException.html", "name": "Karomap\\GeoLaravel\\Exceptions\\InvalidArgumentSpatialException", "doc": "&quot;&quot;"},
                    
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


